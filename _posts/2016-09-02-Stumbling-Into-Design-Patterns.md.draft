---
layout: post
title: Stumbling Into Design Patterns
category: "Rovani on C&sharp;"
tags:
- cqrs
- eventsourcing
- factory
- repository
- service
- ddd
---

As I have been working on the Vigil project, I have been accidentally stumbling onto various patterns. I will go in search of a way
to solve some particular problem, and end up losing several hours while I research some reference the author made about a concept
(or, usually, an acronym) at the end of a post as some kind of _a posteriori_. The two largest design patterns that I am most
excited about are Command Query Responsibility Segregation (CQRS) and Event Sourcing (ES).

## Accidentally Implementing CQRS

I found that I wasn't enjoying how all of my database logic was being tied up first inside of my Controller. I refactored, pulling
all of the database logic out and putting it into its own class (someone had used the word _Repository_ somewhere, so I called it
that). I have always liked pulling code out of the Web Application project and putting it into its own project - so this new
Repository got moved there. However, it meant that the View Models that I was using in the Controller could no longer be access by
the Repository. Thus, the View Models got moved to the (what is now called) Domain project. But wait - now I have to modify a class
in the Domain project if I want to change some data passed to the View. This didn't look right, so the View Models went back into
the Web Project and a new set of classes were made - I called these Models. Ok, but now I need a way to turn the View Models into
Models - or more accurately, extract the data from one and reconstruct it in the other. For this, I invented Mappers, which just
handled shuttling data between my (what I found out were called) POCO classes.

